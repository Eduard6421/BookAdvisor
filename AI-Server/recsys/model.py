# -*- coding: utf-8 -*-
"""Copy of Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h07sSXQ022kefrHrIbUWs9aSsH7tRuts
"""

from google.colab import drive
drive.mount('/content/gdrive')

# %ls '/content/gdrive/My Drive/Recommender/1'

tensorflow.test.gpu_device_name()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import warnings
import tensorflow
from tensorflow import keras

from tensorflow.keras.layers import Input, Embedding, Flatten, Dot, Dense, Dropout, Concatenate , BatchNormalization, Activation
from tensorflow.keras.models import Model
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
from tensorflow.keras import regularizers
from tensorflow.keras import optimizers
from tensorflow.keras import losses
from tensorflow.python.client import device_lib


warnings.filterwarnings('ignore')
# %matplotlib inline

#Find if it is using gpu
print(device_lib.list_local_devices())

# Export
model = keras.models.load_model('/content/gdrive/My Drive/OCROld/regression_model2.h5')



dataset = pd.read_csv('/content/gdrive/My Drive/Datasets/ratingsnew.csv')

dataset.shape


train, test = train_test_split(dataset, test_size=0.2, random_state=42)

n_users = len(dataset.user_id.unique())
n_books = len(dataset.book_id.unique())

# creating book embedding path
book_input = Input(shape=[1], name="Book-Input")
book_embedding = Embedding(n_books+1, 150, name="Book-Embedding")(book_input)
book_vec = Flatten(name="Flatten-Books")(book_embedding)

# creating user embedding path
user_input = Input(shape=[1], name="User-Input")
user_embedding = Embedding(n_users+1, 75, name="User-Embedding")(user_input)
user_vec = Flatten(name="Flatten-Users")(user_embedding)

# concatenate features
conc = Concatenate()([book_vec, user_vec])

# add fully-connected-layers
fc1 = Dense(500)(conc)
norm = BatchNormalization()(fc1)
activation1 = Activation("relu")(norm)
drop1 = Dropout(rate=0.3)(activation1)


fc2 = Dense(350)(activation1)
norm2 = BatchNormalization()(fc2)
activation2 = Activation("relu")(norm2)
drop2 = Dropout(rate=0.3)(activation2)

fc3 = Dense(250)(activation2)
norm3 = BatchNormalization()(fc3)
activation3 = Activation("relu")(norm3)
drop3 = Dropout(rate=0.3)(activation3)

out = Dense(1)(activation3)

# Create model and compile it
#keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-8)
optim = optimizers.Adam(lr=0.00001)
model2 = Model([user_input, book_input], out)
model2.compile(optimizer=optim,loss=losses.mean_squared_error)

from tensorflow.keras.models import load_model

if os.path.exists('/content/gdrive/My Drive/RecSys/regression_model_newest3.h5'):
    model2 = load_model('/content/gdrive/My Drive/RecSys/regression_model_newest3.h5')
else:
    history = model2.fit([train.user_id, train.book_id], train.rating, epochs=5, verbose=1)
    model2.save('/content/gdrive/My Drive/RecSys/regression_model_newest3.h5')
    plt.plot(history.history['loss'])
    plt.xlabel("Epochs")
    plt.ylabel("Training Error")

#Get API endpoints

# inputs:  ['dense_input']
print('inputs: ', [input for input in model2.inputs])

# outputs:  ['dense_4/Sigmoid']
print('outputs: ', [output for output in model2.outputs])

model2.evaluate([test.user_id, test.book_id], test.rating)

import tensorflow as tf

export_path = '/content/gdrive/My Drive/RecSys/1'

# The export path contains the name and the version of the model
tf.keras.backend.set_learning_phase(0)  # Ignore dropout at inference
model = tf.keras.models.load_model('/content/gdrive/My Drive/OCROld/regression_model2.h5')

# Fetch the Keras session and save the model
# The signature definition is defined by the input and output tensors
# And stored with the default serving key
with tf.keras.backend.get_session() as sess:
    tf.saved_model.simple_save(
        sess,
        export_path,
        inputs={'input_image': model.input},
        outputs={t.name: t for t in model.outputs})

model2.save('/content/gdrive/My Drive/OCROld/regression_model_new.h5')